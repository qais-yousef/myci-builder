pipeline {
	agent { label params.NODE }

	stages {
		stage('Verify') {
			steps {
				verify_linux()
			}
		}
		stage('Purge') {
			when {
				expression {
					return env.PURGE == 'true';
				}
			}
			steps {
				cleanWs()
			}
		}
		stage('Checkout') {
			steps {
				checkout_aosp(env.BRANCH, env.NUM_PARALLEL_JOBS, env.FORCE_REPO_SYNC)
			}
		}
		stage('Clean') {
			when {
				expression {
					return env.CLEAN_BUILD == 'true';
				}
			}
			steps {
				clobber_aosp()
			}
		}
		stage('Compile') {
			steps {
				compile_aosp(env.TARGET, env.NUM_PARALLEL_JOBS, env.BUILD_UIBENCH, env.BUILD_JANKBENCH)
			}
		}
		stage('Save changes') {
			steps {
				repo_save_changes("aosp", env.BRANCH)
			}
		}
		stage('Archive') {
			steps {
				archive_aosp()
				archiveArtifacts artifacts: '*.tar.xz', followSymlinks: false
				archiveArtifacts artifacts: 'aosp/**/*--myci.patch', followSymlinks: false, allowEmptyArchive: true
				archiveArtifacts artifacts: 'aosp/out/target/product/**/UiBench.apk', followSymlinks: false, allowEmptyArchive: true
				archiveArtifacts artifacts: 'aosp/out/target/product/**/JankBench.apk', followSymlinks: false, allowEmptyArchive: true
			}
		}
	}
	post {
		always {
			sh "rm -f *.tar.xz"
		}
	}
}

