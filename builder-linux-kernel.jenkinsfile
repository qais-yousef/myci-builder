pipeline {
	agent { label params.NODE }

	parameters {
		string (
			name: 'NODE',
			defaultValue: '',
			description: 'The DUT to run on. Must be Android based DUT.'
		)
		string (
			name: 'DESCRIPTION',
			defaultValue: '',
			description: 'Describe your experiment so that we have a meaningful name for this run to return to.'
		)
		string (
			name: 'UCLAMP_MIN',
			defaultValue: '0',
			description: 'Parameter to pass to uclampset -M ${UCLAMP_MIN}.'
		)
		string (
			name: 'UCLAMP_MAX',
			defaultValue: '1024',
			description: 'Parameter to pass to uclampset -M ${UCLAMP_MAX}.'
		)
		string (
			name: 'NUM_PARALLEL_JOBS',
			defaultValue: '2',
			description: 'Parameter to pass to make -j ${NUM_PARALLEL_JOBS}.'
		)
		choice (
			name: 'GIT_REMOTE',
			choices: [
				'origin   https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git',
				'stable   https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git'
			],
			description: 'Which kernel git remote to use.'
		)
		string (
			name: 'GIT_VERSION',
			defaultValue: 'origin/master',
			description: 'Git branch or version to compile. Prefix with remote name to avoid ambiguity if necessary.'
		)
		string (
			name: 'DEFCONFIG',
			defaultValue: 'defconfig',
			description: 'Kernel config to build.'
		)
		choice (
			name: 'ARCH',
			choices: [
				'arm64',
				'x86'
			],
			description: 'Which ARCH to build.'
		)
		choice (
			name: 'CROSS_COMPILE',
			choices: [
				'aarch64-linux-gnu-'
			],
			description: 'Which gcc cross compiler to use. Empty field is for native builds.'
		)
	}

	options {
		buildDiscarder logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '7', numToKeepStr: '10')
	}

	stages {
		stage('Init') {
			steps {
				verify_params(!env.UCLAMP_MIN ||
					      !env.UCLAMP_MAX ||
					      !env.NUM_PARALLEL_JOBS ||
					      !env.GIT_REMOTE ||
					      !env.GIT_VERSION ||
					      !env.DEFCONFIG ||
					      !env.ARCH ||
					      !env.CROSS_COMPILE)
				set_description()
			}
		}
		stage('Verify') {
			steps {
				verify_linux()
			}
		}
		stage('Checkout') {
			steps {
				checkout_linux_kernel(env.GIT_REMOTE, env.GIT_VERSION)
				clobber_linux_kernel()
			}
		}
		stage('Compile') {
			steps {
				compile_linux_kernel(env.DEFCONFIG, env.UCLAMP_MIN, env.UCLAMP_MAX, env.NUM_PARALLEL_JOBS)
			}
		}
		stage('Archive') {
			steps {
				archiveArtifacts artifacts: 'linux/.config', followSymlinks: false
				archiveArtifacts artifacts: 'linux/vmlinux', followSymlinks: false
				archiveArtifacts artifacts: 'linux/arch/*/boot/Image*', followSymlinks: false, allowEmptyArchive: true
				archiveArtifacts artifacts: 'linux/arch/*/boot/*Image', followSymlinks: false, allowEmptyArchive: true
			}
		}
	}
	post {
		always {
			clobber_linux_kernel()
		}
	}
}

