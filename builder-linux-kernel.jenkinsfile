pipeline {
	agent { label params.NODE }

	parameters {
		string(name: 'NODE', defaultValue: '', description: 'The DUT to run on. Must be Android based DUT.')
		string(name: 'DESCRIPTION', defaultValue: '', description: 'Describe your experiment so that we have a meaningful name for this run to return to')
	}

	options {
		buildDiscarder logRotator(artifactDaysToKeepStr: '7', artifactNumToKeepStr: '10', daysToKeepStr: '7', numToKeepStr: '10')
	}

	stages {
		stage('Init') {
			steps {
				verify_params()
				set_description()
			}
		}
		stage('Verify') {
			steps {
				verify_linux()
			}
		}
		stage('Checkout') {
			steps {
				checkout_linux_kernel(env.GIT_REMOTE, env.GIT_VERSION)
				clobber_linux_kernel()
			}
		}
		stage('Compile') {
			steps {
				compile_linux_kernel(env.DEFCONFIG, env.UCLAMP_MIN, env.UCLAMP_MAX, env.NUM_PARALLEL_JOBS)
			}
		}
		stage('Archive') {
			steps {
				archiveArtifacts artifacts: 'linux/.config', followSymlinks: false
				archiveArtifacts artifacts: 'linux/vmlinux', followSymlinks: false
				archiveArtifacts artifacts: 'linux/arch/*/boot/Image*', followSymlinks: false, allowEmptyArchive: true
				archiveArtifacts artifacts: 'linux/arch/*/boot/*Image', followSymlinks: false, allowEmptyArchive: true
			}
		}
	}
	post {
		always {
			clobber_linux_kernel()
		}
	}
}

